---
layout: post
title:  "Taming FacetAPI Paths"
date:   2012-09-08 20:00:00
categories: Drupal
---
While we were working on one of our upcoming projects, a new website for <a href="http://www.kanker.be/">Stichting tegen Kanker</a>, <a href="http://www.wunderkraut.com">we</a> had to integrate the <a href="http://drupal.org/project/apachesolr">Apache Solr module</a>. We needed Solr for its faceted search capabilities. In combination with the <a href="http://drupal.org/project/facetapi">FacetAPI</a> module, which allows you to easily configure a block or a pane with facet links, we created a page displaying search results containing contact type content and a facets block on the left hand side to narrow down those results.

One of the struggles with FacetAPI are the URLs of the individual facets. While Drupal turns the ugly GET 'q' parameter into a clean URLs, FacetAPI just concatenates any extra query parameters which leads to Real Ugly Paths. The <a href="http://drupal.org/project/facetapi_pretty_paths">FacetAPI Pretty Paths</a> module tries to change that by rewriting those into human friendly URLs.</p>
<p>Our challenge involved altering the paths generated by the facets, but with a slight twist.</p>
<p>Due to the projects architecture, we were forced to replace the full view mode of a node of the bundle type "contact" with a single search result based on the nid of the visited node. This was a cheap way to avoid duplicating functionality and wasting precious time. We used the CTools custom page manager to take over the <em>node/%</em> page and added a variant which is triggered by a selection rule based on the bundle type. The variant itself doesn't use the panels renderer but redirects the visitor to the Solr page passing the nid as an extra argument with the URL. This resulted in a path like this: <em>/contacts?contact=1234</em>.

With this snippet, the contact query parameter is passed to Solr which yields the exact result we need.

{% highlight php %}
<?php
/**
 * Implements hook_apachesolr_query_alter().
 */
function myproject_apachesolr_query_alter($query) {
  if (!empty($_GET['contact'])) {
    $query->addFilter('entity_id', $_GET['contact']);
  }
}
?>
{% endhighlight %}

The result page with our single search result still contains facets in a sidebar. Moreover, the URLs of those facets looked like this: <em>/contacts?contact=1234&amp;f[0]=im_field_myfield....</em>. Now we faced a new problem. The <em>?contact=1234</em> part was conflicting with the rest of the search query. This resulted in an empty result page, whenever our single search result, node 1234, didn't match with the rest of the search query! So, we had to alter the paths of the individual facets, to make them look like this: <em>/contacts?f[0]=im_field_myfield</em>.

This is how I approached the problem.

If you look carefully in the <a href="http://drupalcode.org/project/facetapi.git/blob/refs/heads/7.x-2.x:/facetapi.api.php">API documentation</a>, you won't find any hooks that allow you to directly alter the URLs of the facets. Gutting the FacetAPI module is quite daunting. I started looking for undocumented hooks, but quickly abandoned that approach. Then, I realized that <a href="http://drupal.org/project/facetapi_pretty_paths">FacetAPI Pretty Paths</a> actually does what we wanted: alter the paths of the facets to make them look, well, pretty! I just had to figure out how it worked and emulate its behaviour in our own module.

Turns out that most of the facet generating functionality is contained in a set of adaptable, loosely coupled, extensible classes registered as CTools plugin handlers. Great! This means that I just had to find the relevant class and override those methods with our custom logic while extending.

Facet URLs are generated by classes extending the abstract <a href="http://drupalcode.org/project/facetapi.git/blob/refs/heads/7.x-2.x:/plugins/facetapi/url_processor.inc">FacetapiUrlProcessor</a> class. The <a href="http://drupalcode.org/project/facetapi.git/blob/refs/heads/7.x-2.x:/plugins/facetapi/url_processor_standard.inc">FacetapiUrlProcessorStandard</a> extends and implements the base class and already does all of the heavy lifting, so I decided to take it from there. I just had to create a new class, implement the right methods and register it as a plugin. In the folder of my custom module, I created a new folder <em>plugins/facetapi</em> containing a new file called url_processor_myproject.inc. This is my class:

{% highlight php %}
<?php
/**
 * @file
 * A custom URL processor.
 */

/**
 * Extension of FacetapiUrlProcessor.
 */
class FacetapiUrlProcessorMyProject extends FacetapiUrlProcessorStandard {

  /**
   * Overrides FacetapiUrlProcessorStandard::normalizeParams().
   *
   * Strips the "q" and "page" variables from the params array.
   * Custom: Strips the 'contact' variable from the params array too
   */
  public function normalizeParams(array $params, $filter_key = 'f') {
    return drupal_get_query_parameters($params, array('q', 'page', 'contact'));
  }
}
?>
{% endhighlight %}

I registered my new URL Processor by implementing <a href="http://drupalcode.org/project/facetapi.git/blob/refs/heads/7.x-2.x:/facetapi.api.php">hook_facetapi_url_processors</a> in the myproject.module file.

{% highlight php %}
<?php
/**
 * Implements hook_facetapi_url_processors().
 */
function myproject_facetapi_url_processors() {
  return array(
    'myproject' => array(
      'handler' => array(
        'label' => t('MyProject'),
        'class' => 'FacetapiUrlProcessorMyProject',
      ),
    ),
  );
}
?>
{% endhighlight %}

I also included the .inc file in the myproject.info file:

{% highlight php %}
files[] = plugins/facetapi/url_processor_myproject.inc
{% endhighlight %}

Now I had a new registered URL Processor handler. But I still needed to hook it up with the correct Solr searcher on which the FacetAPI relies to generate facets. <a href="http://drupalcode.org/project/facetapi.git/blob/refs/heads/7.x-2.x:/facetapi.api.php">hook_facetapi_searcher_info_alter</a> allows you to override the searcher definition and tell the searcher to use your new custom URL processor rather than the standard URL processor. This is the implementation in myproject.module:

{% highlight php %}
<?php
/**
 * Implements hook_facetapi_search_info().
 */
function myproject_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as &$info) {
    $info['url processor'] = 'myproject';
  }
}
?>
{% endhighlight %}

After clearing the cache, the correct path was generated per facet. Great! Of course, the paths still don't look pretty and contain those way too visible and way too ugly query parameters. We could enable the FacetAPI Pretty Path module, but by implementing our own URL processor, FacetAPI Pretty Paths will cause a conflict since the searcher uses either one or the other class. Not both. One way to solve this problem would be to extend the <a href="http://drupalcode.org/project/facetapi_pretty_paths.git/blob/refs/heads/7.x-1.x:/plugins/facetapi/url_processor_pretty_paths.inc">FacetapiUrlProcessorPrettyPaths</a> class, since it is derived from the same FacetapiUrlProcessorStandard base class, and override its normalizeParams() method.

But that's another story.
